import time

import pyatecc


ECC_DEF_ADDRESS = 0x60
ECC_BUS = 1
ECC_SLOT_BY_ADDRESS = {
    0x60: 0,
    0x58: 2
}
ECC_RETRIES = 10
ECC_SLEEP = 0.5


_ecc_address = None
_ecc = None


def get_ecc_address():
    global _ecc_address
    if _ecc_address is None:
        with open('/var/run/hardware.conf', 'rt') as f:
            for line in f:
                line = line.strip()
                if not line:
                    continue
                
                parts = line.split('=', 1)
                if len(parts) < 2:
                    continue
                
                key, value = parts
                if key == 'ECC_ADDRESS':
                    _ecc_address = int(value, 16)
                    break
            
            else:
                _ecc_address = ECC_DEF_ADDRESS

    return _ecc_address


def get_ecc_slot():
    return ECC_SLOT_BY_ADDRESS[get_ecc_address()]


def get_ecc():
    global _ecc
    if _ecc is None:
        _ecc = pyatecc.ATECC(ECC_BUS, get_ecc_address())
    
    return _ecc


def get_ecc_serial_number():
    for _ in range(ECC_RETRIES):
        try:
            return get_ecc().serial_number.lower()

        except RuntimeError:
            time.sleep(ECC_SLEEP)
    
    raise RuntimeError('Timeout when talking to ECC')


def get_ecc_pub_key():
    slot = get_ecc_slot()
    for _ in range(ECC_RETRIES):
        try:
            return get_ecc().gen_key(slot)

        except RuntimeError:
            time.sleep(ECC_SLEEP)
    
    raise RuntimeError('Timeout when talking to ECC')


def get_unit_serial_number():
    with open('/proc/cpuinfo', 'rt') as f:
        for line in f:
            if line.startswith('Serial'):
                return line.strip()[-8:]

    raise RuntimeError('Could not read CPU serial number')
